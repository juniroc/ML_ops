# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import prac__pb2 as prac____pb2


class TODO_APPStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create_TD = channel.unary_unary(
                '/practice.TODO_APP/Create_TD',
                request_serializer=prac____pb2.TD_create.SerializeToString,
                response_deserializer=prac____pb2.complete_C.FromString,
                )
        self.Remove_TD = channel.unary_unary(
                '/practice.TODO_APP/Remove_TD',
                request_serializer=prac____pb2.TD_remove.SerializeToString,
                response_deserializer=prac____pb2.complete_D.FromString,
                )
        self.Update_TD = channel.unary_unary(
                '/practice.TODO_APP/Update_TD',
                request_serializer=prac____pb2.TD_update.SerializeToString,
                response_deserializer=prac____pb2.complete_U.FromString,
                )
        self.Read_TD = channel.unary_unary(
                '/practice.TODO_APP/Read_TD',
                request_serializer=prac____pb2.TD_read.SerializeToString,
                response_deserializer=prac____pb2.complete_R.FromString,
                )


class TODO_APPServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Create_TD(self, request, context):
        """Create TODO_
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove_TD(self, request, context):
        """Remove TODO_
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update_TD(self, request, context):
        """finish TODO_
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read_TD(self, request, context):
        """Read TODO_
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TODO_APPServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create_TD': grpc.unary_unary_rpc_method_handler(
                    servicer.Create_TD,
                    request_deserializer=prac____pb2.TD_create.FromString,
                    response_serializer=prac____pb2.complete_C.SerializeToString,
            ),
            'Remove_TD': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove_TD,
                    request_deserializer=prac____pb2.TD_remove.FromString,
                    response_serializer=prac____pb2.complete_D.SerializeToString,
            ),
            'Update_TD': grpc.unary_unary_rpc_method_handler(
                    servicer.Update_TD,
                    request_deserializer=prac____pb2.TD_update.FromString,
                    response_serializer=prac____pb2.complete_U.SerializeToString,
            ),
            'Read_TD': grpc.unary_unary_rpc_method_handler(
                    servicer.Read_TD,
                    request_deserializer=prac____pb2.TD_read.FromString,
                    response_serializer=prac____pb2.complete_R.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'practice.TODO_APP', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TODO_APP(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Create_TD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/practice.TODO_APP/Create_TD',
            prac____pb2.TD_create.SerializeToString,
            prac____pb2.complete_C.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove_TD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/practice.TODO_APP/Remove_TD',
            prac____pb2.TD_remove.SerializeToString,
            prac____pb2.complete_D.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update_TD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/practice.TODO_APP/Update_TD',
            prac____pb2.TD_update.SerializeToString,
            prac____pb2.complete_U.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read_TD(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/practice.TODO_APP/Read_TD',
            prac____pb2.TD_read.SerializeToString,
            prac____pb2.complete_R.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
